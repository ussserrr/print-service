scalar Date

type TemplateFile {
  id: ID!
  title: String!
  mimeType: String!
  templateType: TemplateType!
  isCurrentFileOfItsType: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

# input CreateTemplateFileInput {
#   templateType: TemplateType!  # make it parametrical to use the Type in CreateTemplateType
#   currentFileOfType: TemplateType
#   # file: File!
# }

# input UpdateTemplateFileInput {
#   id: ID!
#   templateType: TemplateType
#   currentFileOfType: TemplateType
# }

input TemplateFilesFilter {
  common: CommonFilter = {}
  templateTypes: [ID!]
  createdAt: [DateFilter!]
  updatedAt: [DateFilter!]
}

input TemplateFilesRequestOptions {
  page: PageInput = {}
}

type TemplateFilesPageResult {
  items: [TemplateFile!]!
  total: Int!
}

type Query {
  templateFiles(
    filter: TemplateFilesFilter = {}
    options: TemplateFilesRequestOptions = {}
  ): TemplateFilesPageResult!
  templateFile(id: ID!): TemplateFile
}

# type Mutation {
#   createTemplateFile(createTemplateFileInput: CreateTemplateFileInput!): TemplateFile!
#   updateTemplateFile(updateTemplateFileInput: UpdateTemplateFileInput!): TemplateFile!
#   removeTemplateFile(id: ID!): TemplateFile
# }
