enum Owner {
  DRIVER
  CAR
}

type TemplateType {
  id: ID!
  owner: Owner!
  title: String!
  active: Boolean!
  pageOfFiles: TemplateFilesPageResult
  currentFile: TemplateFile
}

# input CreateTemplateTypeInput {
#   title: String!
#   active: Boolean
# }

# input UpdateTemplateTypeInput {
#   id: ID!
#   title: String
#   active: Boolean
#   files: [TemplateFile!]
#   currentFile: TemplateFile
# }

input TemplateTypesFilter {
  common: CommonFilter = {}
  active: Boolean
  owners: [Owner!]
  # fileIds,  // TODO: files of these types includes given
  # currentFileIds
}

input TemplateTypesRequestOptions {
  page: PageInput = {}
  listFiles: Boolean = false  # TODO: describe in docs (page of recently updated files)
}

type TemplateTypesPageResult {
  items: [TemplateType!]!
  total: Int!
}

type Query {
  templateTypes(
    filter: TemplateTypesFilter = {}
    options: TemplateTypesRequestOptions = {}
  ): TemplateTypesPageResult!
  templateType(id: ID!): TemplateType
}

# type Mutation {
#   createTemplateType(createTemplateTypeInput: CreateTemplateTypeInput!): TemplateType!
#   updateTemplateType(updateTemplateTypeInput: UpdateTemplateTypeInput!): TemplateType!
#   removeTemplateType(id: ID!): TemplateType
# }
